
@{
    ViewBag.Title = "Create";
}

<h2>Create</h2>
@model  Applicative_Order.Models.ClassCreateProtocol

@*@using (Html.BeginForm()) 
{
    @Html.AntiForgeryToken()
    
    <div class="form-horizontal">
        <h4>Protocol</h4>
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        <div class="form-group">
            @Html.LabelFor(model => model.recipeID, "recipeID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("recipeID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.recipeID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.packSpecID, "packSpecID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("packSpecID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.packSpecID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.bunchSpecificationID, "bunchSpecificationID", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("bunchSpecificationID", null, htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.bunchSpecificationID, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>*@
@*}*@

<div id="rootwizard">
    <div class="navbar">
        <div class="navbar-inner">
            <div class="container">
                <ul>
                    <li><a href="#tab1" data-toggle="tab">Recipe</a></li>
                    <li><a href="#tab2" data-toggle="tab">Bunch Specification</a></li>
                    <li><a href="#tab3" data-toggle="tab">Packing Specification</a></li>
                    <li><a href="#tab4" data-toggle="tab">Label UPC</a></li>

                </ul>
            </div>
        </div>
    </div>
    <div class="tab-content">
        <div class="tab-pane" id="tab1">

            <table id="tabla1" class="table stacktable" border="0">
                <tr>
                    <th>Product Calla</th>
                    <th>Number Buch</th>
                    <th>Number Steams </th>
                    <th>Action   </th>
                </tr>
              
            </table>
        </div>
     
        <div class="tab-pane" id="tab2">

            <div class="form-horizontal">
                <h4>BunchSpecification</h4>
                <hr />
                @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                <div class="form-group">
                    @Html.LabelFor(model => model.bunchSpecification.length, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.bunchSpecification.length, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.bunchSpecification.length, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.bunchSpecification.thickness, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.bunchSpecification.thickness, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.bunchSpecification.thickness, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.bunchSpecification.cut, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.bunchSpecification.cut, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.bunchSpecification.cut, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.bunchSpecification.defoliation, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.bunchSpecification.defoliation, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.bunchSpecification.defoliation, "", new { @class = "text-danger" })
                    </div>
                </div>

                <div class="form-group">
                    @Html.LabelFor(model => model.bunchSpecification.foliage, htmlAttributes: new { @class = "control-label col-md-2" })
                    <div class="col-md-10">
                        @Html.EditorFor(model => model.bunchSpecification.foliage, new { htmlAttributes = new { @class = "form-control" } })
                        @Html.ValidationMessageFor(model => model.bunchSpecification.foliage, "", new { @class = "text-danger" })
                    </div>
                </div>

            </div>
            @*@model  Applicative_Order.Models.PackingSpecification*@
            <div class="tab-pane" id="tab3">
                <div class="form-horizontal">
                    <h4>PackingSpecification</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    <div class="form-group">
                        @Html.LabelFor(model => model.packingSpecification.slizeSleeve, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.packingSpecification.slizeSleeve, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.packingSpecification.slizeSleeve, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.packingSpecification.positionSleeve, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.packingSpecification.positionSleeve, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.packingSpecification.positionSleeve, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.packingSpecification.positionRubber, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.packingSpecification.positionRubber, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.packingSpecification.positionRubber, "", new { @class = "text-danger" })
                        </div>
                    </div>

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.packingSpecification.sleeveTypeID, "sleeveTypeID", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("sleeveTypeID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.packingSpecification.sleeveTypeID, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.packingSpecification.boxTypeID, "boxTypeID", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("boxTypeID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.packingSpecification.boxTypeID, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    @*<div class="form-group">
                        @Html.LabelFor(model => model.packingSpecification.foodTypeID, "foodTypeID", htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.DropDownList("foodTypeID", null, htmlAttributes: new { @class = "form-control" })
                            @Html.ValidationMessageFor(model => model.packingSpecification.foodTypeID, "", new { @class = "text-danger" })
                        </div>
                    </div>*@

                    <div class="form-group">
                        @Html.LabelFor(model => model.packingSpecification.BunchPerBox, htmlAttributes: new { @class = "control-label col-md-2" })
                        <div class="col-md-10">
                            @Html.EditorFor(model => model.packingSpecification.BunchPerBox, new { htmlAttributes = new { @class = "form-control" } })
                            @Html.ValidationMessageFor(model => model.packingSpecification.BunchPerBox, "", new { @class = "text-danger" })
                        </div>
                    </div>
                </div>
            </div>
            <div class="tab-pane" id="tab4">
                <h4>Recipe</h4>
            </div>

            <div style="float:right">
                <input type='button' class='btn button-next' name='next' value='Next' />
            </div>
            <div style="float:left">
                <input type='button' class='btn button-previous' name='previous' value='Previous' />
            </div>
        </div>
    </div>
</div>



<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
}
